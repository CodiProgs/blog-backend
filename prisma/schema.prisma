generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name     String
  email    String @unique
  password String

  nickname String @unique

  avatar String  @default("avatars/default.svg")
  bio    String?

  provider Provider @default(LOCAL)
  role     UserRole @default(USER)

  posts    Post[]
  comments Comment[]
  likes    Like[]

  @@unique([email, provider])
  @@map("user")
}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title   String
  content String
  slug    String @unique

  views Int @default(0)

  authorId String @map("author_id")
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  categoryId String   @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  mediaId String? @unique @map("media_id")
  media   Media?  @relation(fields: [mediaId], references: [id], onDelete: SetNull)

  comments Comment[]
  likes    Like[]

  @@map("post")
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  content String

  isDeleted Boolean @default(false) @map("is_deleted")

  authorId String @map("author_id")
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  postId String @map("post_id")
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  parentId String?  @map("parent_id")
  parent   Comment? @relation("parentChild", fields: [parentId], references: [id], onDelete: SetNull)

  children Comment[] @relation("parentChild")

  @@map("comment")
}

model Category {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  slug String @unique

  description String?

  posts Post[]

  @@map("category")
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String @map("post_id")
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("like")
}

model Media {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  url  String @unique
  type String

  post Post?

  @@map("media")
}

enum Provider {
  LOCAL
  GOOGLE
}

enum UserRole {
  USER
  ADMIN
}
